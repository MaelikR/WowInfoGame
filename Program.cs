using Discord;
using Discord.Commands;
using Discord.Interactions;
using Discord.WebSocket;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text.Json;
using System.Threading.Tasks;
using System.Xml.Linq;
using static System.Net.WebRequestMethods;
using System.Net.Http;
using SummaryAttribute = Discord.Interactions.SummaryAttribute;

namespace WowGameInfo
{
    internal class Program
    {
        private DiscordSocketClient _client;
        private CommandService _commands;
        private IServiceProvider _services;
        private InteractionService _interactions;

        private static Dictionary<ulong, int> _userPoints = new();
        private const string ScoreFile = "scores.json";

        private static Task Main(string[] args) => new Program().MainAsync();

        public async Task MainAsync()
        {
            LoadScores();

            _client = new DiscordSocketClient(new DiscordSocketConfig { LogLevel = LogSeverity.Info });
            _commands = new CommandService();
            _interactions = new InteractionService(_client.Rest); // ‚Üê ‚úÖ ici

            _services = new ServiceCollection()
                .AddSingleton(_client)
                .AddSingleton(_commands)
                .AddSingleton(_interactions)
                .BuildServiceProvider();

            _client.Log += LogAsync;
            _client.MessageReceived += HandleCommandAsync;

            await _commands.AddModulesAsync(Assembly.GetEntryAssembly(), _services);

            string token = "Token"; // ‚ö†Ô∏è Ne jamais laisser en clair

            await _client.LoginAsync(TokenType.Bot, token);
            await _client.StartAsync();

            _client.InteractionCreated += async interaction =>
            {
                var ctx = new SocketInteractionContext(_client, interaction);
                await _interactions.ExecuteCommandAsync(ctx, _services);
            };

            _client.Ready += async () =>
            {
                await _interactions.AddModulesAsync(Assembly.GetEntryAssembly(), _services);
                await _interactions.RegisterCommandsGloballyAsync();
                Console.WriteLine("‚úÖ Slash commands enregistr√©es !");
            };


            Console.WriteLine("‚úÖ Bot WoWGameInfo pr√™t !");
            await Task.Delay(-1);
        }

        public class WowAdvancedModule : ModuleBase<SocketCommandContext>
        {
            // [Command("talents")]
            public async Task TalentsAsync([Remainder] string classe)
            {
                string url = $"https://www.wowhead.com/talent-calc/{classe.ToLower()}";
                var embed = new EmbedBuilder()
                    .WithTitle($"üîß Talents pour {classe}")
                    .WithDescription("Voici l'arbre de talents interactif sur Wowhead.")
                    .WithUrl(url)
                    .WithColor(Color.DarkPurple)
                    .Build();
                await ReplyAsync(embed: embed);
            }
            private static readonly Dictionary<string, string> classMap = new()
            {
                ["demoniste"] = "warlock",
                ["chevalier de la mort"] = "death-knight",
                ["mage"] = "mage",
                ["voleur"] = "rogue",
                ["paladin"] = "paladin",
                ["pretre"] = "priest",
                ["guerrier"] = "warrior",
                ["chasseur"] = "hunter",
                ["chaman"] = "shaman",
                ["druide"] = "druid",
                ["moine"] = "monk",
                ["chasseur de demons"] = "demon-hunter"
            };



            [Command("lore")]
            public async Task LoreAsync([Remainder] string perso)
            {
                string lien = $"https://wowpedia.fandom.com/wiki/{Uri.EscapeDataString(perso.Replace(" ", "_"))}";
                var embed = new EmbedBuilder()
                    .WithTitle($"üìö Lore de {perso}")
                    .WithDescription($"D√©couvre l'histoire de {perso} dans l'univers de WoW.")
                    .WithUrl(lien)
                    .WithColor(Color.Teal)
                    .Build();
                await ReplyAsync(embed: embed);
            }
            [Command("meta")]
            public async Task MetaAsync([Remainder] string classe)
            {
                string url = $"https://www.icy-veins.com/wow/{classe.ToLower()}-dps-rankings-tier-list";
                var embed = new EmbedBuilder()
                    .WithTitle($"üìà Tier List / Meta pour {classe}")
                    .WithDescription("Selon Icy Veins, voici les performances actuelles de la classe.")
                    .WithUrl(url)
                    .WithColor(Color.DarkMagenta)
                    .Build();
                await ReplyAsync(embed: embed);
            }

            [Command("evenement")]
            public async Task EvenementAsync()
            {
                var embed = new EmbedBuilder()
                    .WithTitle("üéâ √âv√©nements WoW en cours")
                    .AddField("üî• F√™te du Feu", "Du 21 juin au 5 juillet")
                    .AddField("üé™ Foire de Sombrelune", "Du 7 au 13 de chaque mois")
                    .AddField("üì¶ Bonus Donjons", "Cette semaine : +25% r√©compenses de fin de donjon")
                    .WithFooter("Pour plus d'infos : wowhead.com/events")
                    .WithColor(Color.Orange)
                    .Build();
                await ReplyAsync(embed: embed);
            }

            [Command("nomrp")]
            public async Task NomRpAsync([Remainder] string race)
            {
                string[] noms = race.ToLower() switch
                {
                    "orc" => new[] { "Gor'thaz", "Mokgrol", "Throgar" },
                    "humain" => new[] { "Ellyra", "Darian", "Cedric" },
                    "elfe" => new[] { "Sylvaria", "Lor'thael", "Thalindra" },
                    _ => new[] { "Aeryn", "Kael", "Zun" }
                };

                string nom = noms[new Random().Next(noms.Length)];
                await ReplyAsync($"üé≠ Nom RP sugg√©r√© pour {race} : **{nom}**");
            }

            [Command("blaguewow")]
            public async Task BlagueAsync()
            {
                string[] blagues = {
            "Pourquoi les paladins n'ont pas peur des fant√¥mes ? Parce qu'ils ont *lumi√®re sacr√©e*!",
            "Quel est le comble pour un d√©moniste ? De ne pas avoir d'amis infernaux.",
            "Les taurens n'ont pas de monture. Ils sont leur propre monture."
        };
                await ReplyAsync($"üòÇ {blagues[new Random().Next(blagues.Length)]}");
            }

            [Command("routefarm")]
            public async Task RouteFarmAsync([Remainder] string ressource)
            {
                var embed = new EmbedBuilder()
                    .WithTitle($"üåø Route de farm recommand√©e pour : {ressource}")
                    .WithDescription(
                        $"Voici quelques zones efficaces pour r√©colter **{ressource}** :\n" +
                        "‚Ä¢ **Hautes-terres d'Arathi**\n" +
                        "‚Ä¢ **Vall√©e de Strangleronce**\n" +
                        "‚Ä¢ **Zuldazar**\n\n" +
                        "üîó [Voir d'autres guides sur wow-professions.com](https://www.wow-professions.com)")
                    .WithColor(Color.Green)
                    .Build();

                await ReplyAsync(embed: embed);
            }


            [Command("astuceclasse")]
            public async Task AstuceClasseAsync([Remainder] string classe)
            {
                string[] astuces = classe.ToLower() switch
                {
                    "mage" => new[] { "Utilise Nova de givre avant de blink pour survivre.", "√âconomise ton burst pour les packs de trashs." },
                    "druide" => new[] { "Utilise les soins HOT avant les gros d√©g√¢ts.", "Pense √† Cyclone en PvP !" },
                    _ => new[] { "Utilise toujours ton cooldown d√©fensif avant les gros d√©g√¢ts." }
                };
                await ReplyAsync($"üí° Astuce pour {classe} : {astuces[new Random().Next(astuces.Length)]}");
            }
            [Command("donjons")]
            public async Task DonjonsAsync()
            {
                var embed = new EmbedBuilder()
                    .WithTitle("üè∞ Donjons populaires de WoW")
                    .WithColor(Color.Gold)
                    .WithDescription("Voici quelques donjons embl√©matiques :")
                    .AddField("‚öíÔ∏è Ragefeu", "[Voir](https://www.wowhead.com/zone=2437)")
                    .AddField("‚ùÑÔ∏è Caveau d‚ÄôUtgarde", "[Voir](https://www.wowhead.com/zone=206)")
                    .AddField("üêç Temple du Serpent de Jade", "[Voir](https://www.wowhead.com/zone=9591)")
                    .AddField("üî• Fl√®ches de Sethekk", "[Voir](https://www.wowhead.com/zone=3791)")
                    .AddField("‚öôÔ∏è M√©chagon", "[Voir](https://www.wowhead.com/zone=1490)");
                await ReplyAsync(embed: embed.Build());
            }

            [Command("raid")]
            public async Task RaidAsync([Remainder] string extension)
            {
                Dictionary<string, List<(string Nom, string Lien)>> raids = new()
                {
                    ["lichking"] = new()
            {
                ("Naxxramas", "https://www.wowhead.com/zone=3456"),
                ("Ulduar", "https://www.wowhead.com/zone=4273"),
                ("Citadelle de la Couronne de glace", "https://www.wowhead.com/zone=4812")
            },
                    ["legion"] = new()
            {
                ("Cauchemar d‚Äô√©meraude", "https://www.wowhead.com/zone=1520"),
                ("Palais Sacrenuit", "https://www.wowhead.com/zone=1530"),
                ("Tombe de Sargeras", "https://www.wowhead.com/zone=1676")
            },
                    ["bfa"] = new()
            {
                ("Uldir", "https://www.wowhead.com/zone=1861"),
                ("Bataille de Dazar'alor", "https://www.wowhead.com/zone=2070"),
                ("Palais √©ternel", "https://www.wowhead.com/zone=2164")
            }
                };

                extension = extension.ToLower().Trim();
                if (!raids.ContainsKey(extension))
                {
                    await ReplyAsync("‚ùå Extension non reconnue. Essaie : `lichking`, `legion`, `bfa`.");
                    return;
                }

                var embed = new EmbedBuilder()
                    .WithTitle($"üèüÔ∏è Raids majeurs de {extension}")
                    .WithColor(Color.Red);

                foreach (var (nom, lien) in raids[extension])
                    embed.AddField(nom, $"[Voir sur Wowhead]({lien})");

                await ReplyAsync(embed: embed.Build());
            }
        }

        private async Task HandleCommandAsync(SocketMessage messageParam)
        {
            if (messageParam is not SocketUserMessage message || message.Author.IsBot) return;

            int argPos = 0;
            if (!message.HasCharPrefix('!', ref argPos)) return;

            var context = new SocketCommandContext(_client, message);
            var result = await _commands.ExecuteAsync(context, argPos, _services);

            if (!result.IsSuccess)
                Console.WriteLine($"‚ùå Commande √©chou√©e : {result.ErrorReason}");
        }

        private Task LogAsync(LogMessage log)
        {
            Console.WriteLine(log.ToString());
            return Task.CompletedTask;
        }

        private void LoadScores()
        {
            if (System.IO.File.Exists(ScoreFile))
            {
                var json = System.IO.File.ReadAllText(ScoreFile);
                _userPoints = JsonSerializer.Deserialize<Dictionary<ulong, int>>(json) ?? new();
            }
        }
        public class WowExtraModule : ModuleBase<SocketCommandContext>
        {
            [Command("defi")]
            public async Task DefiAsync()
            {
                string[] defis = {
            "Tuer 10 murlocs sans mourir !",
            "Finir un donjon en moins de 15 minutes.",
            "Faire une emote /dance devant un boss de raid.",
            "Farmer 50 plantes sans monture volante.",
            "Utiliser uniquement les sorts de rang 1 pendant 10 minutes."
        };
                string defi = defis[new Random().Next(defis.Length)];

                var embed = new EmbedBuilder()
                    .WithTitle("üéØ D√©fi du jour")
                    .WithDescription(defi)
                    .WithColor(Color.Orange)
                    .Build();
                await ReplyAsync(embed: embed);
            }

            [Command("anecdote")]
            public async Task AnecdoteAsync()
            {
                string[] anecdotes = {
            "Le cri de mort des murlocs est devenu un m√®me l√©gendaire.",
            "Arthas est l‚Äôun des personnages les plus tragiques de WoW.",
            "La zone Durotar est nomm√©e d‚Äôapr√®s le p√®re de Thrall.",
            "Il existe une qu√™te o√π tu dois parler √† une ch√®vre‚Ä¶ et √ßa marche !"
        };
                var a = anecdotes[new Random().Next(anecdotes.Length)];

                await ReplyAsync($"üìö **Anecdote WoW :** {a}");
            }

            [Command("citation")]
            public async Task CitationAsync()
            {
                var quotes = new[]
                {
            "\"You are not prepared!\" ‚Äì Illidan Stormrage",
            "\"Arthas, mon fils‚Ä¶\" ‚Äì Le roi Terenas",
            "\"Lok'tar Ogar!\" ‚Äì Cri de guerre orc",
            "\"Les vivants ne peuvent vaincre la mort‚Ä¶\" ‚Äì Le Roi-Liche"
        };
                await ReplyAsync($"üó®Ô∏è **Citation :** {quotes[new Random().Next(quotes.Length)]}");
            }

            [Command("astuce")]
            public async Task AstuceAsync()
            {
                string[] astuces = {
            "üí° Utilise `/follow` pour ne jamais perdre ton tank !",
            "üí° Assigne des touches pour marquer les mobs rapidement.",
            "üí° Un bon DPS c'est bien, un DPS vivant c‚Äôest mieux.",
            "üí° Ne cours pas devant le tank en donjon."
        };
                await ReplyAsync(astuces[new Random().Next(astuces.Length)]);
            }

            [Command("farm")]
            public async Task FarmAsync()
            {
                var embed = new EmbedBuilder()
                    .WithTitle("üåæ Spot de farm recommand√©")
                    .WithDescription("üìç Les Hautes-terres Arathies pour l‚Äôherboristerie.\nüìç Gorges des Vents br√ªlants pour le minerai.")
                    .WithUrl("https://www.wow-professions.com/gathering")
                    .WithColor(Color.Green)
                    .Build();
                await ReplyAsync(embed: embed);
            }

            [Command("rotation")]
            public async Task RotationAsync([Remainder] string classe)
            {
                var url = $"https://www.icy-veins.com/wow/{classe.ToLower()}-pve-dps-rotation-cooldowns-abilities";
                var embed = new EmbedBuilder()
                    .WithTitle($"üîÅ Rotation DPS - {classe}")
                    .WithDescription("Consulte ta rotation optimale ici :")
                    .WithUrl(url)
                    .WithColor(Color.Blue)
                    .Build();
                await ReplyAsync(embed: embed);
            }

            [Command("quetes")]
            public async Task QuetesAsync()
            {
                var embed = new EmbedBuilder()
                    .WithTitle("üìú Qu√™tes √©piques √† faire")
                    .WithDescription("1. La Main de la r√©demption\n2. L'ombre d'Arthas\n3. Le retour de Tirion Fordring")
                    .WithColor(Color.DarkTeal)
                    .Build();
                await ReplyAsync(embed: embed);
            }

            [Command("bg")]
            public async Task BgAsync()
            {
                var embed = new EmbedBuilder()
                    .WithTitle("‚öîÔ∏è Champs de bataille")
                    .WithDescription("üìç Goulet des Chanteguerres\nüìç Vall√©e d‚ÄôAlterac\nüìç Rivage bouillonnant")
                    .WithColor(Color.Red)
                    .WithUrl("https://www.wowhead.com/bg")
                    .Build();
                await ReplyAsync(embed: embed);
            }

            [Command("dpsmeta")]
            public async Task DpsMetaAsync()
            {
                var embed = new EmbedBuilder()
                    .WithTitle("üî• Meilleurs DPS du patch")
                    .WithDescription("Selon WarcraftLogs et Icy Veins :")
                    .AddField("1Ô∏è‚É£ D√©moniste Destruction", "Top d√©g√¢ts en multi-cibles.")
                    .AddField("2Ô∏è‚É£ Mage Givre", "Tr√®s stable et fort en burst.")
                    .AddField("3Ô∏è‚É£ Chasseur Pr√©cision", "Excellente mobilit√©.")
                    .WithUrl("https://www.icy-veins.com/wow/dps-rankings")
                    .WithColor(Color.DarkRed)
                    .Build();
                await ReplyAsync(embed: embed);
            }

            [Command("faq")]
            public async Task FaqAsync()
            {
                var embed = new EmbedBuilder()
                    .WithTitle("‚ùì Questions fr√©quentes")
                    .AddField("Comment rejoindre une guilde ?", "Tape `/guilde` ou demande en /2 Commerce.")
                    .AddField("Comment reset une instance ?", "Sors du donjon puis clic droit sur ton portrait > R√©initialiser.")
                    .AddField("O√π trouver un entra√Æneur ?", "Les capitales en ont toujours un par m√©tier.")
                    .WithColor(Color.LightGrey)
                    .Build();
                await ReplyAsync(embed: embed);
            }
        }

        private void SaveScores()
        {
            var json = JsonSerializer.Serialize(_userPoints, new JsonSerializerOptions { WriteIndented = true });
            System.IO.File.WriteAllText(ScoreFile, json);
        }

        public static void AddPoints(ulong userId, int amount)
        {
            _userPoints[userId] = _userPoints.GetValueOrDefault(userId) + amount;
            System.IO.File.WriteAllText(ScoreFile, JsonSerializer.Serialize(_userPoints, new JsonSerializerOptions { WriteIndented = true }));
        }

        public static int GetPoints(ulong userId) => _userPoints.GetValueOrDefault(userId);

        public static List<(ulong Id, int Points)> GetTopUsers(int count = 5)
        {
            var list = new List<(ulong Id, int Points)>();
            foreach (var pair in _userPoints)
                list.Add((pair.Key, pair.Value));

            list.Sort((a, b) => b.Points.CompareTo(a.Points));
            return list.GetRange(0, Math.Min(count, list.Count));
        }
    }

    public class InfoModule : ModuleBase<SocketCommandContext>
    {
        [Command("info")]
        public async Task InfoAsync()
        {
            var embed = new EmbedBuilder()
                .WithTitle("World of Warcraft")
                .WithDescription("üßô MMORPG l√©gendaire d√©velopp√© par Blizzard.")
                .WithColor(Color.DarkBlue)
                .AddField("Factions", "Alliance & Horde")
                .AddField("Univers", "Azeroth, Draenor, Ombreterre...")
                .Build();

            await ReplyAsync(embed: embed);
        }

        public class HelpInteractionModule : InteractionModuleBase<SocketInteractionContext>
        {
            private Embed embed;
            private object http;

            [SlashCommand("help", "Affiche toutes les cat√©gories de commandes du bot.")]
            public async Task HelpCommand()
            {
                var builder = new ComponentBuilder()
                    .WithButton("üéÆ Quiz & Score", "btn_quiz")
                    .WithButton("üìò Lore", "btn_lore")
                    .WithButton("üß† Builds", "btn_builds")
                    .WithButton("üè∞ Raids", "btn_raids")
                    .WithButton("üé• Vid√©os", "btn_videos");

                var embed = new EmbedBuilder()
                    .WithTitle("üìú WoWGameInfo ‚Äì Menu d‚Äôaide interactif")
                    .WithDescription("Clique sur une cat√©gorie ci-dessous pour voir les commandes correspondantes.")
                    .WithColor(Color.DarkOrange)
                    .Build();

                await RespondAsync(embed: embed, components: builder.Build());
            }

            [SlashCommand("menu", "Affiche le menu g√©n√©ral WoW avec ressources et actualit√©s.")]
            public async Task MenuCommand()
            {
                var embed = new EmbedBuilder()
                    .WithTitle("üìö WoWGameInfo ‚Äì Menu Principal")
                    .WithDescription("Explore les ressources du jeu, builds, vid√©os, actualit√©s, etc.")
                    .WithColor(Color.Blue)
                    .WithUrl("https://worldofwarcraft.blizzard.com")
                    .AddField("üåê Sites utiles",
                        "[Wowhead](https://www.wowhead.com) | " +
                        "[Icy Veins](https://www.icy-veins.com/wow/) | " +
                        "[WoW Professions](https://www.wow-professions.com) | " +
                        "[MMO-Champion](https://www.mmo-champion.com)")
                    .AddField("üì∞ Derni√®res News",
                        "üëâ Tape `/newsrss` pour les derni√®res infos officielles\nüëâ Tape `/news` pour les actus du jour")
                    .WithFooter("Utilise les boutons ci-dessous pour naviguer par th√®me.")
                    .Build();

                var buttons = new ComponentBuilder()
                    .WithButton("üé• Vid√©os", "btn_videos", ButtonStyle.Primary)
                    .WithButton("‚öîÔ∏è Builds", "btn_builds", ButtonStyle.Secondary)
                    .WithButton("üìñ Lore", "btn_lore", ButtonStyle.Success)
                    .WithButton("üìä DPS Meta", "btn_dpsmeta", ButtonStyle.Danger);

                await RespondAsync(embed: embed, components: buttons.Build());
            }

            [SlashCommand("extensions", "Liste toutes les extensions WoW avec leurs liens.")]
            public async Task ExtensionsAsync()
            {
                var embed = new EmbedBuilder()
                    .WithTitle("üì¶ Extensions majeures de World of Warcraft")
                    .WithDescription("Voici la liste compl√®te des extensions :")
                    .WithColor(Color.DarkGreen)
                    .AddField("Classic", "[wowwiki](https://wowwiki-archive.fandom.com/wiki/World_of_Warcraft:_Classic)")
                    .AddField("Burning Crusade", "[wowhead](https://www.wowhead.com/tbc/)")
                    .AddField("Wrath of the Lich King", "[wiki](https://wowpedia.fandom.com/wiki/Wrath_of_the_Lich_King)")
                    .AddField("Mists of Pandaria", "[info](https://wowpedia.fandom.com/wiki/Mists_of_Pandaria)")
                    .AddField("Dragonflight", "[site](https://worldofwarcraft.blizzard.com/en-us/dragonflight)")
                    .Build();
                await RespondAsync(embed: embed);
            }
            [SlashCommand("youtube", "Cha√Ænes YouTube utiles pour les joueurs WoW.")]
            public async Task YouTubeAsync()
            {
                var embed = new EmbedBuilder()
                    .WithTitle("üì∫ Cha√Ænes YouTube pour t'informer sur WoW")
                    .WithColor(Color.Purple)
                    .AddField("Blizzard (Officiel)", "https://www.youtube.com/@BlizzardEnt")
                    .AddField("Icy Veins", "https://www.youtube.com/@icyveins")
                    .AddField("Nixxiom (Lore & Humor)", "https://www.youtube.com/@Nixxiom")
                    .AddField("HazelNuttyGames (Guides)", "https://www.youtube.com/@HazelNuttygames")
                    .Build();
                await RespondAsync(embed: embed);
            }
            [SlashCommand("lore-encyclopedia", "Explore un sujet pr√©cis du lore de WoW.")]
            public async Task LoreEncyclopediaAsync([Discord.Interactions.Summary(description: "Ex: Illidan, L√©gion, Pandarie")] string sujet)
            {
                string url = $"https://wowpedia.fandom.com/wiki/{Uri.EscapeDataString(sujet)}";
                var embed = new EmbedBuilder()
                    .WithTitle($"üìò Lore : {sujet}")
                    .WithDescription($"D√©couvre l'histoire de **{sujet}** sur Wowpedia.")
                    .WithUrl(url)
                    .WithColor(Color.DarkPurple)
                    .WithFooter("Source : Wowpedia")
                    .Build();

                await RespondAsync(embed: embed);
            }
            [SlashCommand("class-guide", "Obtiens un guide PvE bas√© sur ta classe et sp√©cialisation.")]
            public async Task ClassGuideAsync(
    [Summary(description: "Classe ex: mage")] string classe,
    [Summary(description: "Sp√©cialisation ex: feu, sacr√©")] string specialisation)
            {
                string url = $"https://www.icy-veins.com/wow/{classe.ToLower()}-{specialisation.ToLower()}-pve-guide";
                var embed = new EmbedBuilder()
                    .WithTitle($"‚öîÔ∏è Guide {classe} ‚Äì {specialisation}")
                    .WithDescription("Guide d√©taill√© de rotation, talents, stats et √©quipement.")
                    .WithUrl(url)
                    .WithColor(Color.Blue)
                    .Build();

                await RespondAsync(embed: embed);
            }

            [SlashCommand("lore-sites", "Sites √† consulter pour le lore de WoW.")]
            public async Task LoreSitesAsync()
            {
                var embed = new EmbedBuilder()
                    .WithTitle("üìò Sites pour explorer l'histoire de WoW")
                    .WithColor(Color.Blue)
                    .AddField("Wowpedia", "https://wowpedia.fandom.com")
                    .AddField("Wowhead Lore", "https://www.wowhead.com/lore-guides")
                    .AddField("Chronicles Fanpage", "https://warcraftchronicle.com")
                    .Build();
                await RespondAsync(embed: embed);
            }
            [SlashCommand("dps-meta", "Classement actuel des meilleurs DPS.")]
            public async Task DpsMetaAsync()
            {
                var embed = new EmbedBuilder()
                    .WithTitle("üî• DPS META ‚Äì Patch actuel")
                    .WithColor(Color.Orange)
                    .AddField("1Ô∏è‚É£ D√©moniste Destruction", "Excellent en multi-cibles.")
                    .AddField("2Ô∏è‚É£ Mage Givre", "Fort burst + contr√¥les.")
                    .AddField("3Ô∏è‚É£ Chasseur Pr√©cision", "Tr√®s mobile.")
                    .WithFooter("Source : icy-veins.com / warcraftlogs.com")
                    .Build();
                await RespondAsync(embed: embed);
            }

            [SlashCommand("build", "Affiche le guide PvE pour une classe.")]
            public async Task BuildAsync([Discord.Interactions.Summary(description: "Exemple : mage, paladin, etc.")] string classe)
            {
                string url = $"https://www.icy-veins.com/wow/{classe.ToLower()}-pve-guide";
                var embed = new EmbedBuilder()
                    .WithTitle($"‚öîÔ∏è Build recommand√© : {classe}")
                    .WithDescription("Guide PvE complet par Icy Veins.")
                    .WithUrl(url)
                    .WithColor(Color.DarkBlue)
                    .Build();

                await RespondAsync(embed: embed);
            }
            [SlashCommand("zones", "Liste des grandes zones de World of Warcraft.")]
            public async Task ZonesAsync()
            {
                var embed = new EmbedBuilder()
                    .WithTitle("üåç Zones embl√©matiques")
                    .WithColor(Color.Green)
                    .AddField("Azeroth", "For√™t d‚ÄôElwynn, Durotar, Strangleronce‚Ä¶")
                    .AddField("Norfendre", "Toundra Bor√©enne, Couronne de glace")
                    .AddField("Outreterre", "P√©ninsule des Flammes infernales, Nagrand")
                    .WithUrl("https://www.wowhead.com/zones")
                    .Build();
                await RespondAsync(embed: embed, ephemeral: true);
            }

            [SlashCommand("boss", "Boss mythiques de toutes les extensions.")]
            public async Task BossAsync()
            {
                var embed = new EmbedBuilder()
                    .WithTitle("üëπ Boss embl√©matiques")
                    .WithDescription("Retrouve les boss l√©gendaires de WoW.")
                    .AddField("üßä Le Roi-Liche (Arthas)", "[Citadelle de la Couronne de glace](https://www.wowhead.com/zone=4812)")
                    .AddField("üî• Ragnaros", "[C≈ìur du Magma](https://www.wowhead.com/zone=2717)")
                    .AddField("üëÅÔ∏è C‚ÄôThun", "[Ahn'Qiraj](https://www.wowhead.com/zone=3429)")
                    .WithColor(Color.Red)
                    .Build();
                await RespondAsync(embed: embed, ephemeral: true);
            }
            [SlashCommand("zone-info", "Infos d'une zone WoW : description, image, lien")]
            public async Task ZoneInfoAsync([Discord.Interactions.Summary(description: "Ex: durotar, elwynn, zuldazar")] string zone)

            {
                var zoneName = zone.ToLower().Trim();

                var zones = new Dictionary<string, (string desc, string lien, string image)>
                {
                    ["durotar"] = (
                        "Zone de d√©part des orcs, aride et rougeoyante, situ√©e √† l'est de Kalimdor.",
                        "https://www.wowhead.com/zone=14/durotar",
                        "https://static.wikia.nocookie.net/wowwiki/images/4/41/Durotar.jpg"
                    )
                    // Ajoute d'autres zones ici
                };

                if (!zones.TryGetValue(zoneName, out var data))
                {
                    await RespondAsync($"‚ùå Zone inconnue : `{zone}`. Essaie par exemple `durotar`, `elwynn`, `zuldazar`.");
                    return;
                }

                var embed = new EmbedBuilder()
                    .WithTitle($"üìç Zone : {zone}")
                    .WithDescription(data.desc)
                    .WithUrl(data.lien)
                    .WithImageUrl(data.image)
                    .WithColor(Color.DarkGreen)
                    .Build();

                await RespondAsync(embed: embed);
            }

            [SlashCommand("professions", "Liste des m√©tiers principaux.")]
            public async Task ProfessionsAsync()
            {
                var embed = new EmbedBuilder()
                    .WithTitle("üõ†Ô∏è M√©tiers de WoW")
                    .WithColor(Color.Orange)
                    .WithDescription("Forge, Alchimie, D√©pe√ßage, Couture, Enchantement...")
                    .WithUrl("https://www.wowhead.com/professions")
                    .Build();
                await RespondAsync(embed: embed, ephemeral: true);
            }
            [SlashCommand("zone-activity", "Affiche l'activit√© et les infos d'une zone de World of Warcraft.")]
            public async Task ZoneActivityAsync(
    [Discord.Interactions.Summary(description: "Nom de la zone (ex: Durotar, Zuldazar, Elwynn)")] string zone)
            {
                var zoneName = zone.ToLower().Trim();

                var zones = new Dictionary<string, (string desc, string lien, string image, string activite)>
                {
                    ["durotar"] = (
                        "Zone aride de Kalimdor, terre natale des orcs.",
                        "https://www.wowhead.com/zone=14/durotar",
                        "https://static.wikia.nocookie.net/wowwiki/images/4/41/Durotar.jpg",
                        "üå©Ô∏è Orages fr√©quents\nüõ°Ô∏è Activit√© PVP : moyenne\nüîÑ Qu√™tes journali√®res disponibles"
                    ),
                    ["zuldazar"] = (
                        "Ancienne capitale troll Zandalari. Jungle dense et mena√ßante.",
                        "https://www.wowhead.com/zone=862/zuldazar",
                        "https://static.wikia.nocookie.net/wowwiki/images/3/39/Zuldazar.jpg",
                        "üéØ Invasions mineures\n‚öîÔ∏è Donjons proches : Atal'Dazar\nüì¶ Ressources : herbes tropicales"
                    ),
                    ["elwynn"] = (
                        "Plaine verdoyante des humains autour de Hurlevent.",
                        "https://www.wowhead.com/zone=12/elwynn-forest",
                        "https://static.wikia.nocookie.net/wowwiki/images/f/f0/Elwynn_Forest.jpg",
                        "üê∫ Faible activit√© ennemie\nüõçÔ∏è Zones de farm bas niveau\nüìò Lieu de d√©part RP classique"
                    ),
                    ["nagrand"] = (
                        "Une savane √©pique de l'Outreterre, avec des clairi√®res flottantes.",
                        "https://www.wowhead.com/zone=3518/nagrand",
                        "https://static.wikia.nocookie.net/wowwiki/images/2/2c/Nagrand.jpg",
                        "ü¶ê P√™che exotiques\nüì¶ Ressources : minerais rares\nüèá √âv√©nements ar√®nes"
                    ),
                    ["tirisfal"] = (
                        "Terres sombres du royaume d√©chu de Lordaeron.",
                        "https://www.wowhead.com/zone=85/tirisfal-glades",
                        "https://static.wikia.nocookie.net/wowwiki/images/2/23/Tirisfal_Glades.jpg",
                        "‚ò†Ô∏è Zone RP sombre\nüëª Pr√©sence de morts-vivants\nüîÆ Qu√™tes de magie noire"
                    ),
                    ["suramar"] = (
                        "Cit√© elfique cach√©e et prot√©g√©e par des arcanes anciennes.",
                        "https://www.wowhead.com/zone=7637/suramar",
                        "https://static.wikia.nocookie.net/wowwiki/images/d/d6/Suramar.jpg",
                        "‚ú® Qu√™tes de mana\nüèõÔ∏è Architecture elfique\nüïµÔ∏è Infiltration et camouflages"
                    ),
                    ["stormpeaks"] = (
                        "Montagnes enneig√©es du Norfendre, riches en l√©gendes titanesques.",
                        "https://www.wowhead.com/zone=67/the-storm-peaks",
                        "https://static.wikia.nocookie.net/wowwiki/images/6/6e/Storm_Peaks.jpg",
                        "üß≠ Hauts lieux d'exploration\n‚öíÔ∏è Excavations titanesques\nüêâ Vols draconiques"
                    ),
                    ["valsharah"] = (
                        "For√™t mystique, sanctuaire des druides et de la nature.",
                        "https://www.wowhead.com/zone=7558/valsharah",
                        "https://static.wikia.nocookie.net/wowwiki/images/3/3a/Valsharah.jpg",
                        "üå≥ Pr√©sence d‚ÄôYsera\nüåÄ Portails vers le R√™ve d‚Äô√©meraude\nü¶â Faune magique"
                    )
                };

                if (!zones.TryGetValue(zoneName, out var data))
                {
                    var suggestions = string.Join(", ", zones.Keys.Select(z => $"`{z}`"));
                    await RespondAsync($"‚ùå Zone inconnue : `{zone}`. Suggestions : {suggestions}");
                    return;
                }

                var embed = new EmbedBuilder()
                    .WithTitle($"üìç Activit√© en zone : {char.ToUpper(zone[0]) + zone[1..]}")
                    .WithDescription(data.desc)
                    .AddField("üîé Activit√© actuelle", data.activite)
                    .WithUrl(data.lien)
                    .WithImageUrl(data.image)
                    .WithColor(Color.DarkGreen)
                    .WithFooter("Infos RP et lore contextuelles")
                    .Build();

                await RespondAsync(embed: embed);
            }

            [SlashCommand("factions", "Alliance, Horde et bien plus.")]
            public async Task FactionsAsync()
            {
                var embed = new EmbedBuilder()
                    .WithTitle("‚öîÔ∏è Factions majeures")
                    .AddField("Alliance", "Humains, Nains, Elfes de la nuit‚Ä¶")
                    .AddField("Horde", "Orcs, Taurens, Trolls‚Ä¶")
                    .AddField("Neutres", "Pandarens, Cartel Gentepression‚Ä¶")
                    .WithUrl("https://wowpedia.fandom.com/wiki/Faction")
                    .WithColor(Color.Blue)
                    .Build();
                await RespondAsync(embed: embed, ephemeral: true);
            }

            [SlashCommand("mop-classic", "Infos et lien vers MoP Classic")]
            public async Task MopClassicAsync()
            {
                var embed = new EmbedBuilder()
                    .WithTitle("üêº Mists of Pandaria Classic")
                    .WithDescription("La version revisit√©e de MoP est de retour !")
                    .WithUrl("https://worldofwarcraft.blizzard.com/en-us/game/mists-of-pandaria-classic")
                    .WithColor(Color.Teal)
                    .AddField("Nouvelles fonctionnalit√©s", "Sc√©narios, Moine, Pandarie, Donjons √©piques")
                    .Build();

                await RespondAsync(embed: embed, ephemeral: true);
            }
            [ComponentInteraction("btn_quiz")]
            public async Task ShowQuizSection()
            {
                var embed = new EmbedBuilder()
                    .WithTitle("üéÆ Quiz & Score")
                    .WithDescription("`/quiz` ‚Äì Lancer un quiz\n`/reponse` ‚Äì R√©pondre au quiz\n`/points`, `/classement`")
                    .WithColor(Color.Blue)
                    .Build();

                await RespondAsync(embed: embed, ephemeral: true);
            }

            [ComponentInteraction("btn_lore")]
            public async Task ShowLoreSection()
            {
                var embed = new EmbedBuilder()
                    .WithTitle("üìò Lore & Univers")
                    .WithDescription("`/info`, `/classes`, `/races`, `/boss`, etc.")
                    .WithColor(Color.DarkBlue)
                    .Build();

                await RespondAsync(embed: embed, ephemeral: true);
            }
            [ComponentInteraction("btn_dpsmeta")]
            public async Task HandleDpsMeta()
            {
                var embed = new EmbedBuilder()
                    .WithTitle("üìä DPS META (actuel)")
                    .WithDescription("Classement actuel selon les sources :\n- [Icy Veins DPS Rankings](https://www.icy-veins.com/wow/dps-rankings)\n- [Warcraft Logs](https://www.warcraftlogs.com/)")
                    .WithColor(Color.Orange)
                    .Build();

                await RespondAsync(embed: embed, ephemeral: true);
            }

            [ComponentInteraction("btn_builds")]
            public async Task ShowBuildsSection()
            {
                var embed = new EmbedBuilder()
                    .WithTitle("üß† Builds & Talents")
                    .WithDescription("`/build <classe>`, `/talents <classe>`, `/rotation <classe>`")
                    .WithColor(Color.Purple)
                    .Build();

                await RespondAsync(embed: embed, ephemeral: true);
            }

            [ComponentInteraction("btn_raids")]
            public async Task ShowRaidsSection()
            {
                var embed = new EmbedBuilder()
                    .WithTitle("üè∞ Donjons & Raids")
                    .WithDescription("`/donjons`, `/raid <extension>`")
                    .WithColor(Color.DarkRed)
                    .Build();

                await RespondAsync(embed: embed, ephemeral: true);
            }

            [ComponentInteraction("btn_videos")]
            public async Task ShowVideosSection()
            {
                var embed = new EmbedBuilder()
                    .WithTitle("üé• Vid√©os WoW")
                    .WithDescription("`/videointro`, `/videoraid`, `/videobuild`, `/videoaddon`, `/videoactualite`")
                    .WithColor(Color.Teal)
                    .Build();

                await RespondAsync(embed: embed, ephemeral: true);
            }
        }


    }
    public class VideoModule : ModuleBase<SocketCommandContext>
    {
        private Embed BuildEmbed(string titre, string description, string url, Color couleur, string footer = null)
        {
            var embed = new EmbedBuilder()
                .WithTitle(titre)
                .WithDescription(description + $"\n\nüîó [Voir la vid√©o]({url})")
                .WithColor(couleur)
                .WithUrl(url);

            if (!string.IsNullOrWhiteSpace(footer))
                embed.WithFooter(footer);

            return embed.Build();
        }

        [Command("videointro")]
        public async Task VideoIntroAsync()
        {
            var embed = BuildEmbed(
                "üé¨ Introduction √† World of Warcraft",
                "Le trailer cin√©matique l√©gendaire de World of Warcraft (Classic).",
                "https://www.youtube.com/watch?v=eYNCCu0y-Is",
                Color.DarkBlue,
                "Blizzard Entertainment ‚Äì Trailer officiel"
            );

            await ReplyAsync(embed: embed);
        }

        [Command("videoraid")]
        public async Task VideoRaidAsync()
        {
            var embed = BuildEmbed(
                "üì∫ Guide vid√©o : Ulduar (Wrath of the Lich King)",
                "D√©couvrez les m√©caniques du raid Ulduar, l‚Äôun des plus appr√©ci√©s de WoW.",
                "https://www.youtube.com/watch?v=GRqXsmgFaaI",
                Color.Gold,
                "Ulduar ‚Äì Guide par un v√©t√©ran"
            );

            await ReplyAsync(embed: embed);
        }

        [Command("videobuild")]
        public async Task VideoBuildAsync([Remainder] string classe)
        {
            var recherche = $"wow {classe} build pve";
            var url = $"https://www.youtube.com/results?search_query={Uri.EscapeDataString(recherche)}";

            var embed = BuildEmbed(
                $"üîß Builds vid√©os pour {classe}",
                $"Voici une recherche YouTube pour trouver des guides de build PvE pour **{classe}**.",
                url,
                Color.Purple,
                "R√©sultats YouTube (non filtr√©s)"
            );

            await ReplyAsync(embed: embed);
        }

        [Command("videoaddon")]
        public async Task VideoAddonAsync()
        {
            var embed = BuildEmbed(
                "üì¶ Addons indispensables pour WoW",
                "Une s√©lection des meilleurs addons pour am√©liorer ton interface et ton gameplay.",
                "https://www.youtube.com/watch?v=7W4v6Z5jHd0",
                Color.Teal,
                "UI, quality of life, et outils de combat"
            );

            await ReplyAsync(embed: embed);
        }

        [Command("videoactualite")]
        public async Task VideoActuAsync()
        {
            var embed = BuildEmbed(
                "üì∞ Actualit√©s WoW",
                "La cha√Æne officielle Blizzard propose les derni√®res bandes-annonces, annonces et mises √† jour du jeu.",
                "https://www.youtube.com/@BlizzardEnt",
                Color.Orange,
                "Blizzard Entertainment ‚Äì YouTube"
            );

            await ReplyAsync(embed: embed);
        }
    }

    public class QuizModule : ModuleBase<SocketCommandContext>
    {
        private static readonly Dictionary<ulong, string> _pendingAnswers = new();

        private readonly List<(string Question, string Answer)> _quizzes = new()
        {
            ("Quel est le nom du chef de la Horde ?", "Thrall"),
            ("Quel est le continent de d√©part des elfes de la nuit ?", "Kalimdor"),
            ("Qui est l'ancien roi d√©chu devenu le roi-liche ?", "Arthas")
        };

        [Command("quiz")]
        public async Task QuizAsync()
        {
            var quiz = _quizzes[new Random().Next(_quizzes.Count)];
            _pendingAnswers[Context.User.Id] = quiz.Answer;

            await ReplyAsync($"‚ùì **Quiz** : {quiz.Question}\nR√©ponds avec `!reponse ta_r√©ponse`");
        }
        [Command("build mop")]
        public async Task BuildMopAsync([Remainder] string classe)
        {
            string url = $"https://www.icy-veins.com/wow/{classe.ToLower()}-pve-guide";
            var embed = new EmbedBuilder()
                .WithTitle($"‚öîÔ∏è Build MoP ‚Äì {classe}")
                .WithDescription("Guide PvE complet pour MoP Classic (non officiel).")
                .WithUrl(url)
                .WithColor(Color.Orange)
                .Build();

            await ReplyAsync(embed: embed);
        }

        [Command("raid mop")]
        public async Task RaidMopAsync()
        {
            var embed = new EmbedBuilder()
                .WithTitle("üèØ Raids embl√©matiques ‚Äì MoP Classic")
                .WithColor(Color.DarkRed)
                .AddField("C≈ìur de la peur", "[Wowhead](https://www.wowhead.com/zone=6297)")
                .AddField("Terrasse Printani√®re", "[Wowhead](https://www.wowhead.com/zone=6622)")
                .AddField("Si√®ge d‚ÄôOrgrimmar", "[Wowhead](https://www.wowhead.com/zone=6738)")
                .AddField("Tr√¥ne du Tonnerre", "[Wowhead](https://www.wowhead.com/zone=6623)");

            await ReplyAsync(embed: embed.Build());
        }

        [Command("zones mop")]
        public async Task ZonesMopAsync()
        {
            var embed = new EmbedBuilder()
                .WithTitle("üåø Zones majeures ‚Äì Pandarie")
                .WithColor(Color.Green)
                .WithDescription("Explore les zones suivantes :\n- Vall√©e des Quatre vents\n- Sommet de Kun-Lai\n- Steppes de Tanglong\n- Vall√©e de l‚Äô√âternel printemps")
                .WithUrl("https://www.wowhead.com/zones/mop");

            await ReplyAsync(embed: embed.Build());
        }

        [Command("lore mop")]
        public async Task LoreMopAsync()
        {
            var embed = new EmbedBuilder()
                .WithTitle("üìñ Lore ‚Äì MoP")
                .WithColor(Color.Purple)
                .WithDescription("La Pandarie est un continent cach√© longtemps inconnu d'Azeroth, prot√©g√© par les Pandarens.\n\nL'invasion des Sha, les mogu, et le si√®ge d'Orgrimmar ont marqu√© cette √®re.")
                .WithUrl("https://wowpedia.fandom.com/wiki/Mists_of_Pandaria");

            await ReplyAsync(embed: embed.Build());
        }

        [Command("metier mop")]
        public async Task MetierMopAsync()
        {
            var embed = new EmbedBuilder()
                .WithTitle("üõ†Ô∏è M√©tiers recommand√©s ‚Äì MoP")
                .WithColor(Color.Blue)
                .WithDescription("üîπ Cuisine Pandar√®ne (Banquets, nourriture OP)\nüîπ Calligraphie pour parchemins et talents\nüîπ Forge & Enchantement pour optimisations d‚Äô√©quipement")
                .WithUrl("https://www.wow-professions.com/mop-profession-leveling");

            await ReplyAsync(embed: embed.Build());
        }
        [Command("reponse")]
        public async Task ReponseAsync([Remainder] string userAnswer)
        {
            if (!_pendingAnswers.TryGetValue(Context.User.Id, out var correctAnswer))
            {
                await ReplyAsync("‚ùó Utilise `!quiz` d'abord.");
                return;
            }

            if (userAnswer.Trim().Equals(correctAnswer, StringComparison.OrdinalIgnoreCase))
            {
                Program.AddPoints(Context.User.Id, 1);
                await ReplyAsync($"‚úÖ Bonne r√©ponse ! Tu gagnes 1 point. Total : {Program.GetPoints(Context.User.Id)}");
                _pendingAnswers.Remove(Context.User.Id);
            }
            else
            {
                await ReplyAsync("‚ùå Mauvaise r√©ponse !");
            }
        }

        [Command("points")]
        public async Task PointsAsync() =>
            await ReplyAsync($"üèÜ {Context.User.Username}, tu as {Program.GetPoints(Context.User.Id)} point(s).");

        [Command("classement")]
        public async Task ClassementAsync()
        {
            var top = Program.GetTopUsers(5);
            var embed = new EmbedBuilder()
                .WithTitle("üèÜ Classement des joueurs")
                .WithColor(Color.Gold);

            int rank = 1;
            foreach (var (id, points) in top)
            {
                var user = Context.Client.GetUser(id);
                string name = user?.Username ?? $"Inconnu ({id})";
                embed.AddField($"#{rank++} ‚Äî {name}", $"{points} point(s)", inline: false);
            }

            await ReplyAsync(embed: embed.Build());
        }
    }

    public class WowLoreModule : ModuleBase<SocketCommandContext>
    {
        [Command("classes")]
        public async Task ClassesAsync()
        {
            var embed = new EmbedBuilder()
                .WithTitle("üßô Classes jouables")
                .WithDescription("Guerrier, Mage, Voleur, Paladin, Druide, D√©moniste, etc.")
                .WithUrl("https://www.wowhead.com/classes")
                .WithColor(Color.Blue)
                .Build();
            await ReplyAsync(embed: embed);
        }

        [Command("races")]
        public async Task RacesAsync()
        {
            var embed = new EmbedBuilder()
                .WithTitle("üß¨ Races jouables")
                .WithDescription("Humain, Orc, Elfe de la nuit, Troll, Nain, etc.")
                .WithUrl("https://www.wowhead.com/races")
                .WithColor(Color.Green)
                .Build();
            await ReplyAsync(embed: embed);
        }

        [Command("factions")]
        public async Task FactionsAsync()
        {
            var embed = new EmbedBuilder()
                .WithTitle("‚öîÔ∏è Factions")
                .WithDescription("Alliance vs Horde : deux philosophies, deux styles.")
                .WithUrl("https://wowpedia.fandom.com/wiki/Faction")
                .WithColor(Color.Red)
                .Build();
            await ReplyAsync(embed: embed);
        }


        [Command("metiers")]
        public async Task MetiersAsync()
        {
            var embed = new EmbedBuilder()
                .WithTitle("üõ†Ô∏è M√©tiers")
                .WithDescription("Forge, Alchimie, Enchantement, etc.")
                .WithUrl("https://www.wowhead.com/professions")
                .WithColor(Color.Gold)
                .Build();
            await ReplyAsync(embed: embed);
        }

        [Command("role")]
        public async Task RoleAsync()
        {
            var embed = new EmbedBuilder()
                .WithTitle("üé≠ R√¥les en combat")
                .WithDescription("Tank, Soigneur, DPS ‚Äì chacun est essentiel !")
                .WithUrl("https://wowpedia.fandom.com/wiki/Role")
                .WithColor(Color.DarkMagenta)
                .Build();
            await ReplyAsync(embed: embed);
        }
        [Command("heureeu")]
        public async Task HeureEuAsync()
        {
            var heureEu = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central European Standard Time"));
            await ReplyAsync($"üïí Heure serveur EU (CET) : `{heureEu:HH:mm:ss}`");
        }
        [Command("reset")]
        public async Task ResetAsync()
        {
            var now = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central European Standard Time"));
            var prochainReset = now.Date.AddDays((3 - (int)now.DayOfWeek + 7) % 7).AddHours(9); // Mercredi 9h CET

            if (now > prochainReset) prochainReset = prochainReset.AddDays(7);

            var reste = prochainReset - now;
            await ReplyAsync($"‚è≥ Prochain reset hebdomadaire : **{prochainReset:dddd HH:mm}** (dans {reste.Days}j {reste.Hours}h {reste.Minutes}min)");
        }

        [Command("capitales")]
        public async Task CapitalesAsync()
        {
            var embed = new EmbedBuilder()
                .WithTitle("üè∞ Capitales majeures")
                .WithDescription("Orgrimmar, Hurlevent, Lune-d‚ÄôArgent, Darnassus...")
                .WithUrl("https://www.wowhead.com/zone=1519") // Hurlevent
                .WithColor(Color.LightGrey)
                .Build();
            await ReplyAsync(embed: embed);
        }
        [Command("newsrss")]
        public async Task NewsRssAsync()
        {
            var url = "https://www.wowhead.com/blue-tracker?rss";
            var client = new HttpClient();
            client.DefaultRequestHeaders.UserAgent.ParseAdd("Mozilla/5.0 (Windows)");

            using var stream = await client.GetStreamAsync(url);
            var xml = XDocument.Load(stream);
            var items = xml.Descendants("item").Take(5)
                .Select(x => new
                {
                    Title = (string)x.Element("title"),
                    Link = (string)x.Element("link")
                }).ToList();

            var embed = new EmbedBuilder()
                .WithTitle("üì∞ Blue Tracker ‚Äì WoW News")
                .WithColor(Color.DarkBlue);

            foreach (var it in items)
                embed.AddField(it.Title, $"[Lire]({it.Link})");

            await ReplyAsync(embed: embed.Build());
        }


        [Command("serveurs")]
        public async Task ServeursAsync()
        {
            var embed = new EmbedBuilder()
                .WithTitle("üñ•Ô∏è Types de serveurs")
                .WithDescription("PVE, PVP, RP, RPPVP ‚Äî √† chacun son ambiance !")
                .WithUrl("https://eu.forums.blizzard.com/fr/wow/t/guide-types-de-royaumes/")
                .WithColor(Color.Orange)
                .Build();
            await ReplyAsync(embed: embed);
        }
    }


    public class NewsModule : ModuleBase<SocketCommandContext>
    {
        [Command("news")]
        public async Task NewsAsync()
        {
            var embed = new EmbedBuilder()
                .WithTitle("üåü Derni√®res Actualit√©s WoW")
                .WithColor(Color.DarkBlue)
                .WithDescription("Mets-toi √† jour avec les patchs, r√©cits officiels et actualit√©s du jour.")
                .AddField("üî• Hotfixes ‚Äì 10 juin 2025", "[D√©tails des changements de classes et sorts](https://news.blizzard.com/en-us/article/24201420/hotfixes-june-10-2025)")
                .AddField("üìñ Patch 11.1.7 ‚Äì Legacy of Arathor", "[Preview & r√©compenses](https://gamerant.com/world-of-warcraft-patch-11-1-7-campaign-rewards-story-details/)")
                .AddField("‚úçÔ∏è Nouvelle Short Story : Faith & Flame", "[Lire sur Blizzard](https://news.blizzard.com/en-us/article/24209851/warcraft-short-story-faith-flame)")
                .WithFooter($"Actualis√© : {DateTime.UtcNow:dd/MM/yyyy HH:mm} UTC")
                .Build();

            await ReplyAsync(embed: embed);
        }

        [Command("recherche")]
        public async Task RechercheAsync([Remainder] string terme)
        {
            var url = $"https://www.wowhead.com/search?q={Uri.EscapeDataString(terme)}";

            var embed = new EmbedBuilder()
                .WithTitle($"üîç R√©sultat de recherche pour : {terme}")
                .WithDescription("Clique ci-dessous pour consulter les r√©sultats sur Wowhead.")
                .WithUrl(url)
                .WithColor(Color.Gold)
                .Build();

            await ReplyAsync(embed: embed);
        }
        [Command("meteo")]
        public async Task MeteoAsync([Remainder] string zone)
        {
            var embed = new EmbedBuilder()
                .WithTitle($"‚òÅÔ∏è M√©t√©o dans {zone}")
                .WithDescription($"Dans **{zone}**, les conditions sont souvent :\nüåßÔ∏è Pluie l√©g√®re\nüå´Ô∏è Brouillard magique\nüåû √âclaircies solaires")
                .WithColor(Color.LightGrey)
                .WithFooter("Estimation roleplay, pas en temps r√©el")
                .Build();

            await ReplyAsync(embed: embed);
        }
        [Command("craft")]
        public async Task CraftAsync([Remainder] string objet)
        {
            var url = $"https://www.wowhead.com/search?q={Uri.EscapeDataString(objet)}";
            var embed = new EmbedBuilder()
                .WithTitle($"üõ†Ô∏è Guide de craft : {objet}")
                .WithDescription("Consulte les composants et plans n√©cessaires.")
                .WithUrl(url)
                .WithColor(Color.Orange)
                .Build();

            await ReplyAsync(embed: embed);
        }
        [Command("sac")]
        public async Task SacAsync()
        {
            var embed = new EmbedBuilder()
                .WithTitle("üéí Gestion d'inventaire")
                .WithDescription("üí° Astuces :\n- Trie r√©guli√®rement les sacs.\n- Utilise des sacs sp√©cialis√©s (herboriste, mineur‚Ä¶)\n- Vends les objets gris automatiquement avec un addon comme Scrap.")
                .WithColor(Color.DarkOrange)
                .Build();

            await ReplyAsync(embed: embed);
        }
        [Command("reputations")]
        public async Task ReputationsAsync()
        {
            var embed = new EmbedBuilder()
                .WithTitle("üìú R√©putations importantes")
                .WithDescription("Voici quelques r√©putations cl√©s √† monter pour du stuff ou des recettes.")
                .AddField("üëë Kirin Tor", "[Voir](https://www.wowhead.com/faction=1090/kirin-tor)")
                .AddField("üêâ Accord d‚ÄôAlexstrasza", "[Voir](https://www.wowhead.com/faction=2507/dragonscale-expedition)")
                .AddField("‚òØÔ∏è Pandashan", "[Voir](https://www.wowhead.com/faction=1271/shado-pan)")
                .AddField("‚öîÔ∏è Main de l‚ÄôAube", "[Voir](https://www.wowhead.com/faction=529/the-argent-dawn)")
                .WithColor(Color.Teal)
                .Build();

            await ReplyAsync(embed: embed);
        }
        [Command("addons")]
        public async Task AddonsAsync()
        {
            var embed = new EmbedBuilder()
                .WithTitle("üì¶ Addons WoW recommand√©s")
                .AddField("üîé Details (DPS Meter)", "[Lien CurseForge](https://www.curseforge.com/wow/addons/details)")
                .AddField("üìú WeakAuras", "[Lien CurseForge](https://www.curseforge.com/wow/addons/weakauras-2)")
                .AddField("üßπ Leatrix Plus", "[Lien CurseForge](https://www.curseforge.com/wow/addons/leatrix-plus)")
                .AddField("üì¶ Bagnon (inventaire)", "[Lien CurseForge](https://www.curseforge.com/wow/addons/bagnon)")
                .WithColor(Color.Blue)
                .Build();

            await ReplyAsync(embed: embed);
        }
        [Command("pvpmeta")]
        public async Task PvpMetaAsync()
        {
            var embed = new EmbedBuilder()
                .WithTitle("‚öîÔ∏è Top classes PvP (3v3 Arena)")
                .AddField("1Ô∏è‚É£ Guerrier Armes", "Haute pression & burst")
                .AddField("2Ô∏è‚É£ Chaman Am√©lioration", "Utility + burst")
                .AddField("3Ô∏è‚É£ D√©moniste Affliction", "Contr√¥le + DoTs")
                .WithUrl("https://www.skill-capped.com/")
                .WithColor(Color.Red)
                .Build();

            await ReplyAsync(embed: embed);
        }
        [Command("sitesutiles")]
        public async Task SitesUtilesAsync()
        {
            var embed = new EmbedBuilder()
                .WithTitle("üåç Sites incontournables WoW")
                .AddField("üîé Wowhead", "https://www.wowhead.com/")
                .AddField("üìò Icy Veins (Guides)", "https://www.icy-veins.com/wow/")
                .AddField("üìä WarcraftLogs", "https://www.warcraftlogs.com/")
                .AddField("üõ†Ô∏è CurseForge", "https://www.curseforge.com/")
                .AddField("üì° MMO-Champion", "https://www.mmo-champion.com/")
                .WithColor(Color.Purple)
                .Build();

            await ReplyAsync(embed: embed);
        }
        [Command("objectifs")]
        public async Task ObjectifsAsync()
        {
            var embed = new EmbedBuilder()
                .WithTitle("üéØ Objectifs hebdo WoW")
                .WithDescription("Voici ce que tu peux viser chaque semaine :")
                .AddField("üó∫Ô∏è Exp√©ditions", "Fais au moins 4 qu√™tes de faction.")
                .AddField("üõ°Ô∏è Donjons Mythiques", "Compl√®te au moins un +10 pour la grande chambre.")
                .AddField("‚öîÔ∏è PVP hebdo", "Gagne des matchs cot√©s pour des r√©compenses.")
                .AddField("üèÜ Tour des Mages", "[Infos ici](https://www.icy-veins.com/wow/mage-tower-guide)")
                .WithColor(Color.Gold)
                .Build();

            await ReplyAsync(embed: embed);
        }
        [Command("megalore")]
        public async Task MegaLoreAsync()
        {
            var embed = new EmbedBuilder()
                .WithTitle("üìñ M√©ga Lore de World of Warcraft")
                .WithDescription("Voyage √† travers toute l‚Äôhistoire de World of Warcraft. Chaque extension, chaque conflit, chaque h√©ros. üåç")
                .WithColor(Color.DarkPurple)
                .WithFooter("Sources officielles : WoWpedia, Wowhead, Blizzard");

            embed
                .AddField("üßô Classic (Vanilla)", "[R√©sum√© complet](https://wowpedia.fandom.com/wiki/Timeline_(WoW)) ‚Äì Le monde d‚ÄôAzeroth rena√Æt apr√®s les guerres. Premiers conflits entre races, guerre contre le Fl√©au et r√©surgence de la L√©gion.")
                .AddField("üî• The Burning Crusade", "[Histoire](https://wowpedia.fandom.com/wiki/The_Burning_Crusade) | [Zones](https://www.wowhead.com/outland) ‚Äì Illidan, les Naaru, l'Outreterre. Le portail noir est ouvert‚Ä¶")
                .AddField("‚ò†Ô∏è Wrath of the Lich King", "[Lore](https://wowpedia.fandom.com/wiki/Wrath_of_the_Lich_King) | [Arthas](https://wowpedia.fandom.com/wiki/Arthas_Menethil) ‚Äì La croisade vers Norfendre. Le roi-liche attend au sommet de la Citadelle.")
                .AddField("üåã Cataclysm", "[Histoire](https://wowpedia.fandom.com/wiki/Cataclysm) | [Aile de Mort](https://wowpedia.fandom.com/wiki/Deathwing) ‚Äì Azeroth est d√©chir√©e par les √©l√©ments. Nouvelles zones et races.")
                .AddField("üêº Mists of Pandaria", "[Pandarie](https://wowpedia.fandom.com/wiki/Mists_of_Pandaria) | [Sha](https://wowpedia.fandom.com/wiki/Sha) ‚Äì L‚ÄôEmpire Pandaren, ses secrets, et le retour de la guerre entre factions.")
                .AddField("‚öôÔ∏è Warlords of Draenor", "[Draenor](https://wowpedia.fandom.com/wiki/Warlords_of_Draenor) | [Gul'dan](https://wowpedia.fandom.com/wiki/Gul%27dan) ‚Äì Une timeline parall√®le, la Horde de Fer, et les origines des orcs.")
                .AddField("üíö Legion", "[Lore](https://wowpedia.fandom.com/wiki/Legion_(expansion)) | [Illidan](https://wowpedia.fandom.com/wiki/Illidan_Stormrage) ‚Äì L‚Äôassaut final de la L√©gion ardente. Artefacts, titans et r√©demption.")
                .AddField("‚öîÔ∏è Battle for Azeroth", "[Conflit global](https://wowpedia.fandom.com/wiki/Battle_for_Azeroth) | [Sylvanas](https://wowpedia.fandom.com/wiki/Sylvanas_Windrunner) ‚Äì Azerite, anciens dieux, Teldrassil en feu.")
                .AddField("üíÄ Shadowlands", "[Au-del√†](https://wowpedia.fandom.com/wiki/Shadowlands) | [Le Ge√¥lier](https://wowpedia.fandom.com/wiki/The_Jailer) ‚Äì La mort a une volont√©, et Sylvanas brise le voile.")
                .AddField("üêâ Dragonflight", "[√éles aux dragons](https://wowpedia.fandom.com/wiki/Dragonflight) | [Aspects](https://wowpedia.fandom.com/wiki/Dragonflight_(faction)) ‚Äì Les aspects reviennent, l‚Äôancien monde s‚Äô√©veille.")
                .AddField("üå∏ MoP Classic", "[Annonce Blizzard](https://worldofwarcraft.blizzard.com/fr-fr/news/24031582) ‚Äì Le retour de Pandarie en version Classic. Lore intact et nostalgie assur√©e !");

            await ReplyAsync(embed: embed.Build());
        }
        [Command("spotfarm")]
        public async Task SpotFarmAsync([Remainder] string ressource)
        {
            var url = $"https://www.wow-professions.com/farming/{Uri.EscapeDataString(ressource.ToLower())}";

            var embed = new EmbedBuilder()
                .WithTitle($"üåæ Zones de farm pour : {ressource}")
                .WithDescription("Voici une route de farm recommand√©e.")
                .WithUrl(url)
                .WithColor(Color.Green)
                .Build();

            await ReplyAsync(embed: embed);
        }
        [Command("wowfunfact")]
        public async Task WowFunFactAsync()
        {
            string[] facts =
            {
        "La danse du troll m√¢le est inspir√©e de MC Hammer.",
        "Il existe un PNJ du nom de Linken dans Un‚ÄôGoro Crater ‚Äì clin d‚Äô≈ìil √† Zelda.",
        "La lune de Draenor s'appelle Argus, qui deviendra une plan√®te visitable plus tard.",
        "Thrall a √©t√© doubl√© par Chris Metzen, cr√©ateur de WoW."
    };

            await ReplyAsync($"üéâ **Fun Fact WoW :** {facts[new Random().Next(facts.Length)]}");
        }
        [Command("serveursactifs")]
        public async Task ServeursActifsAsync()
        {
            var embed = new EmbedBuilder()
                .WithTitle("üñ•Ô∏è Statut des serveurs europ√©ens")
                .WithDescription("Consulte les statuts officiels des royaumes Blizzard :")
                .WithUrl("https://eu.battle.net/support/fr/article/76459")
                .WithColor(Color.Orange)
                .Build();

            await ReplyAsync(embed: embed);
        }
        [Command("metapvp")]
        public async Task MetaPvpAsync()
        {
            var embed = new EmbedBuilder()
                .WithTitle("‚öîÔ∏è M√©ta PvP actuelle")
                .WithDescription("Top classes en ar√®ne & champs de bataille (patch r√©cent).")
                .AddField("ü•á Sp√© top", "Guerrier Armes, Chasseur Survie, Moine Marche-vent")
                .AddField("üí° Source", "[Wowhead PvP Meta](https://www.wowhead.com/guides/pvp-tier-list-ranked-arena-class-spec)")
                .WithColor(Color.DarkBlue)
                .Build();

            await ReplyAsync(embed: embed);
        }
        [Command("tournoi")]
        public async Task TournoiAsync()
        {
            var embed = new EmbedBuilder()
                .WithTitle("üéØ Prochains tournois WoW e-sport")
                .WithDescription("Suivez les √©v√©nements comp√©titifs !")
                .AddField("üî¥ Live & archives", "[YouTube AWC](https://www.youtube.com/user/WoWEsports)")
                .AddField("üìÖ Calendrier", "[Blizzard Arena Schedule](https://worldofwarcraft.blizzard.com/en-us/esports)")
                .WithColor(Color.Red)
                .Build();

            await ReplyAsync(embed: embed);
        }
        [Command("m√©tier")]
        public async Task MetierAsync([Remainder] string metier)
        {
            var url = $"https://www.wow-professions.com/{Uri.EscapeDataString(metier.ToLower())}-guide";

            var embed = new EmbedBuilder()
                .WithTitle($"üî® Guide m√©tier : {metier}")
                .WithDescription("Guide complet pour monter le m√©tier efficacement.")
                .WithUrl(url)
                .WithColor(Color.Orange)
                .Build();

            await ReplyAsync(embed: embed);
        }
        [Command("lieuxrp")]
        public async Task LieuxRpAsync()
        {
            var embed = new EmbedBuilder()
                .WithTitle("üé≠ Lieux RP embl√©matiques")
                .WithDescription("Envie de jouer un elfe noble ou un troll mystique ?")
                .AddField("üå≤ Bois de la p√©nombre", "Ambiance gothique id√©ale.")
                .AddField("‚öôÔ∏è Quartier de Forgefer", "RP nain, tavernes et forges.")
                .AddField("ü™∂ Cabestan", "Parfait pour du RP pirate/marchand.")
                .WithColor(Color.Purple)
                .Build();

            await ReplyAsync(embed: embed);
        }
        [Command("livreswow")]
        public async Task LivresWowAsync()
        {
            var embed = new EmbedBuilder()
                .WithTitle("üìö Romans officiels de WoW")
                .WithDescription("Plonge dans le lore avec ces r√©cits :")
                .AddField("‚Ä¢ Arthas: Rise of the Lich King", "[Amazon](https://www.amazon.fr/dp/1416550947)")
                .AddField("‚Ä¢ Illidan", "[Amazon](https://www.amazon.fr/dp/0399177562)")
                .AddField("‚Ä¢ War Crimes", "[Amazon](https://www.amazon.fr/dp/1451684482)")
                .WithColor(Color.Teal)
                .Build();

            await ReplyAsync(embed: embed);
        }
        [Command("astrologie")]
        public async Task AstrologieAsync()
        {
            string[] signes = { "Soleil de Hurlevent", "Lune de Lune-d‚ÄôArgent", "√âclipse d‚ÄôAhn‚ÄôQiraj" };
            string[] predictions = {
        "Une grande aventure vous attend dans les Terres Ingrates.",
        "L‚Äôamour frappera √† la porte de votre guilde.",
        "Faites attention √† votre √©quipement, il pourrait se briser bient√¥t !"
    };

            var r = new Random();
            await ReplyAsync($"üîÆ Signe : **{signes[r.Next(signes.Length)]}**\nüìò Proph√©tie : *{predictions[r.Next(predictions.Length)]}*");
        }
        [Command("playlistwow")]
        public async Task PlaylistWowAsync()
        {
            await ReplyAsync("üéº Playlist √©pique WoW sur YouTube :\nhttps://www.youtube.com/watch?v=DSUIhVAeTHQ&list=PLRQGRBgN_EnT1wYVbGyxPlFD3XrOrH-5r");
        }
        [Command("histoirejour")]
        public async Task HistoireJourAsync()
        {
            var histoires = new[]
            {
        "üìú *Il √©tait une fois un orc nomm√© Grommash Hurlenfer...*",
        "üìú *Sylvanas Windrunner ne craignait rien... sauf le vide en elle.*",
        "üìú *Le vol draconique noir complotait dans les profondeurs...*"
    };
            await ReplyAsync(histoires[new Random().Next(histoires.Length)]);
        }
        [Command("siteofficiel")]
        public async Task SiteOfficielAsync()
        {
            await ReplyAsync("üåê [Site officiel World of Warcraft](https://worldofwarcraft.blizzard.com/)");
        }

        [Command("boutique")]
        public async Task BoutiqueAsync()
        {
            await ReplyAsync("üõí Boutique Blizzard :\nhttps://shop.battle.net/");
        }

        [Command("support")]
        public async Task SupportAsync()
        {
            await ReplyAsync("üõ†Ô∏è Support officiel :\nhttps://eu.battle.net/support/fr/");
        }

        [Command("forums")]
        public async Task ForumsAsync()
        {
            await ReplyAsync("üí¨ Forums communautaires :\nhttps://eu.forums.blizzard.com/fr/wow/");
        }

    }
}
